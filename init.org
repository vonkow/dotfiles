* Init and Monkeypatch
  There's a lot of little things to tweak before we start adding
  features and defining bindings.
** Preamble (aka =.emacs=)
   In order to have this cool org-ified init file, .emacs does a few
things. This includes calling package-initialize and loading org before 
evaluating this file. 

   We also follow symlinks by default so that I can throw this file
(and =.emacs=) in =~/dotfiles= (under VC) and link to it.

It looks something like this:
#+BEGIN_SRC emacs-lisp

;;  (package-initialize)
;;  (setq vc-follow-symlinks t)
;;  (require 'org)
;;  (org-babel-load-file (expand-file-name "~/init.org"))

#+END_SRC
** All about Packages
   Gotta configure how we get packages before getting them
*** Other repos
    Get packages from (m)elpa
#+BEGIN_SRC emacs-lisp

  (require 'package)
  (add-to-list 'package-archives 
    (cons "melpa"  "https://melpa.org/packages/"))

#+END_SRC
*** Using use-package
    Use =use-package= to load packages. =:ensure= and =:defer= by default
#+BEGIN_SRC emacs-lisp

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)

  (setq use-package-always-ensure t
        use-package-always-defer t)

#+END_SRC
** Pathing is silly
   Use the shell's path, not stupid Mac OS path
#+BEGIN_SRC emacs-lisp

  (use-package exec-path-from-shell)
  (exec-path-from-shell-initialize)

#+END_SRC
** Custom is sillier
   No clutter from custom in =.emacs=
#+BEGIN_SRC emacs-lisp

  (setq custom-file "~/init-custom.el")
  (load-file custom-file)

#+END_SRC
** Death to tabs
   Self explanatory, with regards to Mike "Fibonacci" Chaten.
#+BEGIN_SRC emacs-lisp

  (setq-default indent-tabs-mode nil)

#+END_SRC
** TODO And to noises
   Doubly so.
#+BEGIN_SRC emacs-lisp

  (setq ring-bell-function 'ignore)

#+END_SRC
** Charsets
   UTF-8 is basically gospel at this point, die heretics!
   This allegedly [[https://thraxys.wordpress.com/2016/01/13/utf-8-in-emacs-everywhere-forever/][forces UTF-8 across the board]]
#+BEGIN_SRC emacs-lisp

  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (when (display-graphic-p)
    (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))

#+END_SRC
** Splash Screen / Starting Buffer
   Start here in =init.org= so that you can always improve things.
   This will encourage you to be better every day, or at least 
   maybe you'll remember to add shortcuts to your bindings as you
   find them.
   Maybe someday open "important" org stuff too, or is that too much?
#+BEGIN_SRC emacs-lisp

  (setq inhibit-splash-screen t)
  (setq initial-buffer-choice "~/init.org")

#+END_SRC
** Smooth scrolling
   There's packages that do this if you ever want to add more external bloat
#+BEGIN_SRC emacs-lisp

  (setq
    scroll-step 1
    scroll-conservatively 10000)

#+END_SRC
** Menus, scrollbars, toolbars 
   Be rid of them until you find useful versions.
   Also hide the mac menu bar for more real estate
#+BEGIN_SRC emacs-lisp

  (scroll-bar-mode 0)
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (setq ns-auto-hide-menu-bar t)

#+END_SRC
** Window logic
#+BEGIN_SRC emacs-lisp
#+END_SRC
* Themes and Fonts
  It doesn't matter cuz it's black and white.
  Well, grey. Or, gray?
#+BEGIN_SRC emacs-lisp

  (global-font-lock-mode 1)

  (use-package white-theme)
  (load-theme 'white t)

  (custom-set-faces
    '(mode-line ((t (:foreground "white" :background "#585858" :box nil))))
    '(mode-line-inactive ((t (:foreground "#E8E8E8" :background "#B8B8B8" :box nil))))
    '(persp-selected-face ((t (:weight bold :foreground "#F8F8F8")))))

  (set-face-attribute 'mode-line-buffer-id nil :background "#B8B8B8" :foreground "white")

  (defface mode-line-directory
    '((t :background "#B8B8B8" :foreground "#F8F8F8"))
    "Face used for buffer identification parts of the mode line."
    :group 'mode-line-faces
    :group 'basic-faces)

  ;; A hard choice
  (cond ((find-font (font-spec :name "Operator Mono"))
         (set-face-attribute 'default nil
           :family "Operator Mono"
           :height 160
           :weight 'book
           :width 'normal))
        ((find-font (font-spec :name "IBM Plex Mono"))
         (set-face-attribute 'default nil
           :family "IBM Plex Mono"
           :height 140
           :weight 'normal
           :width 'normal))
        (t 
         (set-face-attribute 'default nil
           :family "PT Mono"
           :height 150
           :weight 'normal
           :width 'normal)))

#+END_SRC
* Mode Line
#+BEGIN_SRC emacs-lisp

  (use-package delight)

  ;; display-time-mode mail notification
  (defface display-time-mail-face '((t (:background "#E8E8E8")))
      "If display-time-use-mail-icon is non-nil, its background colour is that
       of this face. Should be distinct from mode-line. Note that this does not seem
       to affect display-time-mail-string as claimed.")

  (setq
    display-time-mail-file "~/.Mail/caz@rover.com/"
    display-time-use-mail-icon t
    display-time-mail-face 'display-time-mail-face)

  (defun shorten-directory (dir max-length)
    "Show up to `max-length' characters of a directory name `dir'."
    (let ((path (reverse (split-string (abbreviate-file-name dir) "/")))
                 (output ""))
         (when (and path (equal "" (car path)))
           (setq path (cdr path)))
         (while (and path (< (length output) (- max-length 4)))
           (setq output (concat (car path) "/" output))
           (setq path (cdr path)))
         (when path
           (setq output (concat ".../" output)))
         output))

  (defvar mode-line-directory
    '(:propertize
      (:eval (if (buffer-file-name) (concat " " (shorten-directory default-directory 15)) " "))
                  face mode-line-directory)
    "Formats the current directory.")
  (put 'mode-line-directory 'risky-local-variable t)

  (setq-default mode-line-buffer-identification
    (propertized-buffer-identification "%b "))

  (display-time-mode t)
  (setq display-time-24hr-format t)
  (setq display-time-day-and-date t)

  (display-battery-mode t)

  (column-number-mode 1)

  (setq-default mode-line-format
    '("%e"
      mode-line-front-space
      mode-line-client
      mode-line-modified
      " " mode-line-directory
      mode-line-buffer-identification
      " " mode-line-position
      " " (flycheck-mode flycheck-mode-line)
      " " mode-line-misc-info
      mode-line-end-spaces))

  ;(setq global-mode-string (remove 'display-time-string global-mode-string))
  ;(setq mode-line-end-spaces
        ;(list (propertize " " 'display '(space :align-to (- right 12)))
              ;'display-time-string)) 

  (setq header-line-format mode-line-format
    mode-line-format nil)

#+END_SRC
* Evil
  vi 'til I die
#+BEGIN_SRC emacs-lisp

  (use-package evil
    :delight evil-mode
    :ensure t
    :demand
    :init (setq evil-want-keybinding nil)
    :config (evil-mode 1))

#+END_SRC
** Evil Collection
   Evil mode in the rest of emacs.
   +Going for opt-in by mode for now, but might+ just go all-in soon.
#+BEGIN_SRC emacs-lisp

  ;(use-package evil-collection
    ;:custom (evil-collection-setup-minibuffer t)
    ;:init (evil-collection-init))

#+END_SRC
** Extra Evil Packages
    Misery loves company.
#+BEGIN_SRC emacs-lisp

  (use-package evil-surround)
  (require 'evil-surround)
  (global-evil-surround-mode 1)

#+END_SRC
*** TODO Add more evil packages?
* General & Leaders
  The Evilest of Leaders?
  This makes all the keybindings be more betterer.
  Also define Leaders.
  Leaders precipitate Followers, Global and Local.
#+BEGIN_SRC emacs-lisp

  (use-package general 
    :demand
    :config
    (setq general-override-states '(insert
                                    emacs
                                    hybrid
                                    normal
                                    visual
                                    motion
                                    operator
                                    replace))

    (general-create-definer global-leader
      :states '(normal visual motion)
      :keymaps 'override 
      :prefix "SPC")
    (global-leader
      "" '(nil :which-key "global leader")
      "SPC" '(execute-extended-command :which-key "execute")))
  (general-create-definer local-leader 
      :keymaps 'normal
      :prefix ",")
  (local-leader "" '(nil :wk "local leader"))

#+END_SRC
* Global Keymaps
#+BEGIN_SRC emacs-lisp

  ;; Global maps
  (defvar buffer-global-map (make-sparse-keymap) "buffer shortcuts")
  (defvar dirs-global-map (make-sparse-keymap) "directory shortcuts")
  (defvar email-global-map (make-sparse-keymap) "email shortcuts")
  (defvar file-global-map (make-sparse-keymap) "file shortcuts")
  (defvar git-global-map (make-sparse-keymap) "git shortcuts")
  (defvar lisp-global-map (make-sparse-keymap) "lisp")
  (defvar org-global-map (make-sparse-keymap) "org shortcuts")
  (defvar project-global-map (make-sparse-keymap) "project shortcuts")
  (defvar term-local-map (make-sparse-keymap) "term local shortcuts")

  ;; Global bindings
  (global-leader "b" '(:keymap buffer-global-map :wk "buffers"))
  (global-leader "d" '(:keymap dirs-global-map :wk "directories"))
  (global-leader "e" '(:keymap email-global-map :wk "email"))
  (global-leader "f" '(:keymap file-global-map :wk "files"))
  (global-leader "g" '(:keymap git-global-map :which-key "git"))
  (global-leader "l" '(:keymap lisp-global-map :wk "lispy things"))
  (global-leader "o" '(:keymap org-global-map :which-key "org"))
  (global-leader "p" '(:keymap project-global-map :wk "project"))
  ;; "s" is mapped to perspective map down below
  (global-leader "t" '(:keymap term-local-map :wk "term"))

#+END_SRC
* Which key?
  So we can see what's bound to what.
#+BEGIN_SRC emacs-lisp

  (use-package which-key 
    :delight
    :demand)
  (which-key-mode)

#+END_SRC
* Helm
  It gets around.
#+BEGIN_SRC emacs-lisp

  (use-package helm-core)

  (use-package helm
    :delight
    :config (progn
      (setq helm-buffers-fuzzy-matching t)
      (helm-mode 1)))
      ;(define-key helm-map (kbd "TAB") #'helm-execute-persistent-action)
      ;(define-key helm-map (kbd "<tab>") #'helm-execute-persistent-action)
      ;(define-key helm-map (kbd "C-z") #'helm-select-action)

  (use-package helm-descbinds)

  (use-package helm-ag)

#+END_SRC
** TODO helm-swoop if it looks coole
* Buffers
  Everything's a buffer, man.
#+BEGIN_SRC emacs-lisp

  (general-define-key
    :keymaps 'buffer-global-map
    :wk-full-keys nil
    "b" '(buffer-menu :wk "buffers")
    "s" '(switch-to-buffer :wk "switch")
    "k" '(kill-buffer :wk "kill buffer")
    "n" '(next-buffer :wk "next")
    "p" '(previous-buffer :wk "prev"))

#+END_SRC
* Perspective
  It's all how you look at it.
#+BEGIN_SRC emacs-lisp

  (use-package perspective)
  (persp-mode)

  (global-leader "s" '(:keymap perspective-map :wk "perspective"))
  (general-define-key
    :keymaps 'perspective-map
    :wk-full-keys nil
    "l" '(persp-switch-quick :wk "quick switch"))

#+END_SRC
* Files
  Buffers that think they know where they are.
#+BEGIN_SRC emacs-lisp

  (general-define-key
    :keymaps 'file-global-map
    :wk-full-keys nil
    "f" '(find-file :wk "find file")
    "F" '(helm-projectile-find-file-dwim :wk "find file dwim"))

#+END_SRC

* Directories and Dired
  Here and There.
  Dired is better than ls+vim<TAB><TAB>, but still needs tweaking.
  Hide file details by default.
#+BEGIN_SRC emacs-lisp

  (general-define-key
    :keymaps 'dirs-global-map
    :wk-full-keys nil
    "d" '(dired-jump :wk "dired"))

  (add-hook 'dired-mode-hook
    (lambda ()
      (dired-hide-details-mode)))

#+END_SRC

* Terminal
  Yay for shell, make it of the z variety
  I couldn't get local leader to work for ~p~ and ~n~, so I made it
  all global for now.
#+BEGIN_SRC emacs-lisp

  (use-package multi-term)
  (setq multi-term-program "/bin/zsh")

  (general-define-key
    :keymaps 'term-local-map
    :package 'multi-term
    :wk-full-keys nil
    "n" '(multi-term-next :wk "next")
    "p" '(multi-term-prev :wk "prev")
    "c" '(multi-term :wk "create"))

#+END_SRC
* Search and Ag
  The silver surfer will probably be replaced by faster search someday.
  Heavy is the head that wears the crown.
#+BEGIN_SRC emacs-lisp

  (use-package ag
    :config
    (add-hook 'ag-mode-hook 'toggle-truncate-lines)
    (setq ag-highlight-search t)
    (setq ag-reuse-buffers 't))

#+END_SRC
* Projects and Projectile
  Everything you need to know about one (big) thing.
  Rob Rosado would remind you to manage your shit.
#+BEGIN_SRC emacs-lisp

  (use-package projectile
    :ensure t
    :config
    (projectile-global-mode)
    (setq projectile-mode-line
          '(:eval (format " [%s]" (projectile-project-name))))
    (setq projectile-remember-window-configs t)
    (setq projectile-completion-system 'helm))

  (use-package helm-projectile)
  (require 'helm-projectile)
  (helm-projectile-on)

  (general-define-key
    :keymaps 'project-global-map
    :wk-full-keys nil
    "d" '(helm-projectile-find-dir :wk "find dir")
    "f" '(projectile-find-file :wk "find file")
    "s" '(helm-projectile-ag :wk "search")
    "w" '(helm-projectile-switch-project :wk "switch project"))

#+END_SRC
* Git and Magit
  Magit is awesome, use it.
#+BEGIN_SRC emacs-lisp

  (use-package magit)
  (use-package evil-magit)

  (general-define-key
    :keymaps 'git-global-map
    :wk-full-keys nil
    "b" '(magit-blame :wk "blame")
    "s" '(magit-status :wk "magit"))

  (local-leader
    :package 'magit
    :definer 'minor-mode
    :states 'normal
    :keymaps 'with-editor-mode
    "," '(with-editor-finish :wk "commit")
    "c" '(with-editor-finish :wk "commit")
    "k" '(with-editor-cancel :wk "cancel"))

#+END_SRC
** TODO git timemachine
* Email
  This is jenky right now, fix it
#+BEGIN_SRC emacs-lisp

  (add-to-list 'load-path "~/projects/mu/mu4e")
  (require 'mu4e)

  (setq mu4e-maildir "~/.Mail")
  (setq mu4e-drafts-folder "/[Gmail].Drafts"
    mu4e-sent-folder "/[Gmail].All Mail"
    mu4e-refile-folder "/[Gmail].All Mail"
    mu4e-trash-folder "/[Gmail].Bin")
  ;; don't save message to Sent Messages, Gmail/IMAP takes care of this
  (setq mu4e-sent-messages-behavior 'delete)
  ;; offlineimap needs old python
  (setq mu4e-get-mail-command "python2.7 /usr/local/Cellar/offlineimap/7.2.1/libexec/offlineimap.py")

  ;; shortcuts
  (setq mu4e-maildir-shortcuts
      '( ("/INBOX"               . ?i)
         ("/[Gmail].Sent Mail"   . ?s)))

  ;; bookmarks
  (setq mu4e-bookmarks `(("\\\\Inbox" "Inbox" ?i)
    ("flag:flagged" "Flagged messages" ?f)
    (,(concat "flag:unread AND "
          "NOT flag:trashed AND "
          "NOT maildir:/[GMAIL].Spam AND "
          "NOT maildir:/[GMAIL].Bin")
      "Unread messages" ?u)))

  ;; about ME
  (setq
      user-mail-address "caz@rover.com"
      user-full-name "Caz Downing-Bryant"
      mu4e-compose-signature
      (concat
          "- Caz Downing-Bryant\n"
          "Tech Lead, New Business Lines\n"
          "https://rover.com\n"))

  (setq mu4e-show-images t)
  (when (fboundp 'imagemagick-register-types)
      (imagemagick-register-types))

  (setq mu4e-html2text-command "textutil -stdin -format html -convert txt -stdout")

  (add-hook 'mu4e-compose-mode-hook
          (defun my-do-compose-stuff ()
              "My settings for message composition."
              (set-fill-column 72)
              (flyspell-mode)))

  ;; add option to view html message in a browser
  ;; `aV` in view to activate
  ;(add-to-list 'mu4e-view-actions
      ;'("ViewInBrowser" . mu4e-action-view-in-browser) t)

  (setq mu4e-update-interval 600)

  ;; force gmail to get the fact that something's been archived or starred
  (add-hook 'mu4e-mark-execute-pre-hook
          (lambda (mark msg)
            (cond ((member mark '(refile trash)) (mu4e-action-retag-message msg "-\\Inbox"))
                  ((equal mark 'flag) (mu4e-action-retag-message msg "\\Starred"))
                  ((equal mark 'unflag) (mu4e-action-retag-message msg "-\\Starred")))))

  ;; for sending mail
  (setq message-send-mail-function 'smtpmail-send-it
       smtpmail-stream-type 'starttls
       smtpmail-default-smtp-server "smtp.gmail.com"
       smtpmail-smtp-server "smtp.gmail.com"
       smtpmail-smtp-service 587)

  (general-define-key
    :keymaps 'email-global-map
    :wk-full-keys nil
    "c" 'mu4e-compose-new
    "m" 'mu4e)

#+END_SRC
* Org
  Installed by =.emacs=, hence the cool org-ified init file.
#+BEGIN_SRC emacs-lisp

  (setq org-archive-location "%s_archive::datetree/")

  (use-package evil-org
    :after org
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
              (lambda ()
                (evil-org-set-key-theme)))
    (add-hook 'org-mode-hook #'(lambda () (electric-indent-local-mode 0)))
    (add-hook 'org-mode-hook #'(lambda () (setq evil-auto-indent nil))))

  (use-package org-bullets
    :after org
    :ensure t
    :init (setq org-bullets-bullet-list '("*" "◉" "◎" "○" "◇"))
    :config 
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  (setq org-capture-templates
    '(("t" "TODO" entry (file "~/org/todos.org")
           "* TODO %?\n")
      ("n" "TODO Now (self)" entry (file+olp "~/org/self.org" "Tasks" "Now")
           "*** TODO %?\n")
      ("s" "TODO Soon (self)" entry (file+olp "~/org/self.org" "Tasks" "Soon")
           "*** TODO %?\n")
      ("l" "TODO Later (self)" entry (file+olp "~/org/self.org" "Tasks" "Later")
           "*** TODO %?\n")
      ("T" "Work TODO" entry (file+datetree "~/org/rover.org")
           "**** TODO %?\n")
      ("N" "TODO Now (rover)" entry (file+olp "~/org/rover.org" "Tasks" "Now")
           "*** TODO %?\n")
      ("S" "TODO Soon (rover)" entry (file+olp "~/org/rover.org" "Tasks" "Soon")
           "*** TODO %?\n")
      ("L" "TODO Later (rover)" entry (file+olp "~/org/rover.org" "Tasks" "Later")
           "*** TODO %?\n")
      ("P" "Work Implementation Plan" entry (file+olp "~/org/rover.org" "Implementation Plans")
           "** %?\n*** Purpose\n\n*** Goals\n\n*** Overview\n\n*** Development Plan\n\n*** Testing and Deployment Plan\n\n*** Documentation Plan\n")
      ("I" "Work Interview" entry (file+datetree "~/org/rover.org")
           "**** TODO Interview %?\n***** Intros\n***** Code/Data Model\n***** Questions\n")))

  (setq org-agenda-files '("~/org/" "~/dotfiles/init.org"))

  (general-define-key
    :package 'org
    :major-modes 'org-mode
    :states 'normal
    :keymaps 'org-mode-map
    "TAB" 'org-cycle
    "t" 'org-todo)

  (general-define-key
    :keymaps 'org-global-map
    :wk-full-keys nil
    "c" '(org-capture :wk "capture")
    "l" '(org-store-link :wk "store link")
    "a" '(org-agenda :wk "agenda")
    "b" '(org-iswitchb :wk "switch buffers"))

  (defvar org-local-map (make-sparse-keymap) "org local shortcuts")
  (general-define-key
    :keymaps 'org-local-map
    :package 'org
    :wk-full-keys nil
    "," '(org-ctrl-c-ctrl-c :wk "C-c C-c")
    "/" '(org-sparse-tree :wk "sparse tree")
    "f" '(helm-org-in-buffer-headings :wk "find heading") ; gonna do an
    "g" '(org-mark-ring-goto :wk "goto back") ; experiment here
    "p" '(org-set-property :wk "set property")
    "r" '(org-priority :wk "set priority")
    "t" '(org-set-tags-command :wk "set tags")
    "d" '(org-deadline :wk "Deadline")
    "s" '(org-archive-subtree :wk "Archive Subtree")
    "z" '(org-schedule :wk "Schedule")
    ">" '(outline-demote :wk "Outline Demote")
    "<" '(outline-promote :wk "Outline Promote")
    "e" '(org-export-dispatch :wk "Export"))

  (local-leader
    :package 'org
    :major-modes '(org-mode t)
    :keymaps 'normal
    "" '(:keymap org-local-map :wk "org local"))

  (local-leader
    :package 'org
    :definer 'minor-mode
    :states 'normal
    :keymaps 'org-capture-mode
    "," '(org-capture-finalize :wk "finish")
    "c" '(org-capture-finalize :wk "finish")
    "w" '(org-capture-refile :wk "refile")
    "k" '(org-capture-kill :wk "kill"))

#+END_SRC
** JIRA (in org)
#+BEGIN_SRC emacs-lisp

(use-package org-jira
  :init (setq jiralib-url "https://roverdotcom.atlassian.net"))

#+END_SRC
* Completion CompAny
  For now
#+BEGIN_SRC emacs-lisp

  (use-package company-jedi
    :config
    ;(setq jedi:environment-virtualenv (list (expand-file-name "~/.emacs.d/.python-environments/")))
    (setq jedi:complete-on-dot t)
    (setq jedi:use-shortcuts t)
    (defun config/enable-company-jedi ()
      (add-to-list 'company-backends 'company-jedi))
    (add-hook 'python-mode-hook 'config/enable-company-jedi))


  (use-package company
    :delight company-mode
    :init
    (add-hook 'after-init-hook 'global-company-mode)
    :bind
    ("M-/" . company-complete-common)
    :config
    ;(add-to-list 'company-backends 'company-flow)
    (setq company-dabbrev-downcase nil)
    (define-key company-active-map (kbd "TAB") 'company-complete-common-or-cycle)
    (define-key company-active-map (kbd "<tab>") 'company-complete-common-or-cycle)
    (define-key company-active-map (kbd "S-TAB") 'company-select-previous)
    (define-key company-active-map (kbd "<backtab>") 'company-select-previous))

  ;(use-package company-flow)

#+END_SRC
* Checking
  Flycheck
#+BEGIN_SRC emacs-lisp

  (use-package flycheck
    :ensure t
    :config
    (setq flycheck-check-syntax-automatically '(mode-enabled save))
    (setq flycheck-python-flake8-executable "flake8")
    (setq flycheck-disabled-checkers
      (append flycheck-disabled-checkers
        '(javascript-jshint)))
    (setq flycheck-disabled-checkers
      (append flycheck-disabled-checkers
        '(json-jsonlist)))
    (flycheck-add-mode 'javascript-eslint 'web-mode)
    (flycheck-add-mode 'javascript-eslint 'js-mode)
    (flycheck-add-mode 'javascript-eslint 'jsx-mode)
    ;(flycheck-add-mode 'javascript-flow 'flow-minor-mode)
    ;;(flycheck-add-next-checker 'javascript-flow 'javascript-eslint)
    ;(flycheck-add-mode 'javascript-eslint 'flow-minor-mode)
    (add-hook 'after-init-hook #'global-flycheck-mode))
    ;(add-hook 'python-mode-hook 'flycheck-mode)
    ;(add-hook 'go-mode-hook 'flycheck-mode)
    ;(add-hook 'sh-mode-hook 'flycheck-mode)
    ;(add-hook 'rst-mode-hook 'flycheck-mode)
    ;(add-hook 'js2-mode-hook 'flycheck-mode)
    ;(add-hook 'web-mode-hook 'flycheck-mode)
    ;(add-hook 'mmm-mode-hook 'flycheck-mode)
    ;(add-hook 'js-mode-hook 'flycheck-mode))

  ;; use local eslint from node_modules before global
  ;; http://emacs.stackexchange.com/questions/21205/flycheck-with-file-relative-eslint-executable
  (defun my/use-eslint-from-node-modules ()
    (let* ((root (locate-dominating-file
                  (or (buffer-file-name) default-directory)
                  "node_modules"))
           (eslint (and root
                        (expand-file-name "node_modules/eslint/bin/eslint.js"
                                          root))))
      (when (and eslint (file-executable-p eslint))
        (setq-local flycheck-javascript-eslint-executable eslint))))
  (add-hook 'flycheck-mode-hook #'my/use-eslint-from-node-modules)

  ;(use-package flycheck-flow)

#+END_SRC
**** TODO Finish adding stuff from http://codewinds.com/blog/2015-04-02-emacs-flycheck-eslint-jsx.html
* Python
  Just jedi for now until I know what it and everything else does
  Maybe look into anaconda, eldoc, nose, and elpy again
#+BEGIN_SRC emacs-lisp

  (use-package jedi)
  (add-hook 'python-mode-hook 'jedi:setup)

  (defvar python-local-map (make-sparse-keymap) "org local shortcuts")
  (local-leader
    :major-modes '(python-mode t)
    :keymaps 'normal
    "" '(:keymap python-local-map :wk "python local"))

  (general-define-key
    :keymaps 'python-local-map
    ;:package 'jedi
    :wk-full-keys nil
    "s" '(jedi:show-doc : "Show Docs")
    "j" '(jedi:goto-definition :wk "Goto Definition")
    "k" '(jedi:goto-definition-pop-marker :wk "Go Back from Definition"))

#+END_SRC
* JS/HTML/CSS
  htmlcssjs will never truly escape each other.
#+BEGIN_SRC emacs-lisp

  (use-package web-mode)
  (use-package mmm-mode)
  (use-package rjsx-mode :ensure t)
  (use-package js2-mode
    :ensure t
    :after (rjsx-mode)
    :config
    (setq js2-basic-offset 2)
    (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
    (add-to-list 'interpreter-mode-alist '("node" . js2-mode))
    (add-to-list 'auto-mode-alist '("\\.jsx?\\'" . js2-jsx-mode))
    (add-to-list 'interpreter-mode-alist '("node" . js2-jsx-mode)))

#+END_SRC
** Prettier
   The prettierest one could use some scss help, but is otherwise
   cool, I guess.
   Maybe add to scss someday?
#+BEGIN_SRC emacs-lisp

  (use-package prettier-js
    :config
    (add-hook 'js-mode-hook 'prettier-js-mode)
    (add-hook 'js2-mode-hook 'prettier-js-mode)
    (add-hook 'web-mode-hook 'prettier-js-mode))

#+END_SRC
** Flow
   Is dumb and won't install from melpa.
   clone it into ~/.emacs.d and run the following if you want it.
   https://github.com/flowtype/flow-for-emacs
   https://github.com/rudolfolah/emacs-flow-jsx
#+BEGIN_SRC emacs-lisp

  ;(load-file "~/.emacs.d/flow-for-emacs/flow.el")
  ;(load-file "~/.emacs.d/emacs-flow-jsx/emacs-flow-jsx-mode.el")
  ;(add-to-list 'auto-mode-alist '("\\.js\\'" . flow-jsx-mode))
  ;(use-package flow-minor-mode)
  ;(add-hook 'js2-mode-hook 'flow-minor-enable-automatically)
  ;(add-hook 'flow-jsx-mode-hook 'flow-minor-enable-automatically)

#+END_SRC
* Lisp
#+BEGIN_SRC emacs-lisp

  (use-package slime
    :init
    (setq inferior-lisp-program "/usr/local/bin/sbcl")
    :config
    (setq slime-contribs '(slime-fancy)))

  (use-package paredit
    :config
      ; The below could use auditing and maybe expanding to make this file work with paredit too
      (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
      (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
      (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
      (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
      (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
      (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
      (add-hook 'scheme-mode-hook           #'enable-paredit-mode))

  (general-define-key
    :keymaps 'lisp-global-map
    :wk-full-keys nil
    "k" '(slime :wk "slime")
    "b" '(eval-buffer :wk "eval buffer")
    "e" '(eval-expression :wk "eval expression")
    "f" '(eval-defun :wk "eval defun")
    "l" 'eval-last-sexp
    "r" '(eval-region :wk "eval region")
    "s" '(ielm :wk "shell"))

#+END_SRC
