* Init and Monkeypatch
  There's a lot of little things to tweak before we start adding
  features and defining bindings.
** Preamble (aka =.emacs=)
   In order to have this cool org-ified init file, .emacs does a few
things. This includes calling package-initialize and loading org before 
evaluating this file. 

   We also follow symlinks by default so that I can throw this file
(and =.emacs=) in =~/dotfiles= (under VC) and link to it.

It looks something like this:
#+BEGIN_SRC emacs-lisp
; (package-initialize)
; (setq vc-follow-symlinks t)
; (require 'org)
; (org-babel-load-file (expand-file-name "~/init.org"))
#+END_SRC
** All about Packages
   Gotta configure how we get packages before getting them
*** Other repos
    Get packages from (m)elpa
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives 
    (cons "melpa"  "https://melpa.org/packages/"))
#+END_SRC
*** Using use-package
    Use =use-package= to load packages. =:ensure= and =:defer= by default
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  
  (require 'use-package)

  (setq use-package-always-ensure t
        use-package-always-defer t)
#+END_SRC
** Pathing is silly
   Use the shell's path, not stupid Mac OS path
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell)
  (exec-path-from-shell-initialize)
#+END_SRC
** Custom is sillier
   No clutter from custom in =.emacs=
#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/init-custom.el")
  (load-file custom-file)
#+END_SRC
** Death to tabs
   Self explanatory.
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC
** And to noises
   Doubly so.
#+BEGIN_SRC emacs-lisp
 (setq ring-bell-function 'ignore)
#+END_SRC
** Charsets
   UTF-8 is basically gospel at this point, die heretics!
   This allegedly [[https://thraxys.wordpress.com/2016/01/13/utf-8-in-emacs-everywhere-forever/][forces UTF-8 across the board]]
#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (when (display-graphic-p)
    (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+END_SRC
** Menus, scrollbars, toolbars 
   Be rid of them until you find useful versions.
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (toggle-scroll-bar -1)
#+END_SRC
** Splash Screen / Starting Buffer
   Start here in =init.org= so that you can always improve things.
   This will encourage you to be better every day, or at least 
   maybe you'll remember to add shortcuts to your bindings as you
   find them.
   Maybe someday open "important" org stuff too, or is that too much?
#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t)
  (setq initial-buffer-choice "~/init.org")
#+END_SRC
* Packages and config
  Emacs has good functions, but let's add gooderer ones.
** Evil
    vi 'til I die
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :demand
    :config (evil-mode 1))
  (require 'evil)
#+END_SRC
*** Some Extra Evil Packages
    Misery loves company.
**** We have you surrounded
#+BEGIN_SRC emacs-lisp
  (use-package evil-surround)
  (require 'evil-surround)
  (global-evil-surround-mode 1)
#+END_SRC
**** TODO Add more evil packages?
** General.el
    The Evilest Leader?
    This makes all the keybindings be more betterer.
#+BEGIN_SRC emacs-lisp
  (use-package general :demand)
  (require 'general)
#+END_SRC
** Which key?
    So we can see what's bound to what.
#+BEGIN_SRC emacs-lisp
  (use-package which-key :demand)
  (which-key-mode)
#+END_SRC
** Smooth Scrolling
   We could do it ourselves with `scroll-step 1 scroll-conservatively
   10000` but fuck it, let's use a package because even if it's bloat
   they probably thought of how to handle some edge cases or hopefully
   made the feature nicer.
#+BEGIN_SRC emacs-lisp
  (setq
    scroll-step 1
    scroll-conservatively 10000)
  ;(use-package smooth-scrolling
    ;:demand
    ;:config (progn
              ;(smooth-scrolling-mode 1)
              ;(setq smooth-scroll-margin 5)))
#+END_SRC
*** TODO Make C_f and C_b from evil work nice with this
** Helm
   It gets around.
#+BEGIN_SRC emacs-lisp
(use-package helm-core)

(use-package helm
  :config (progn
            (setq helm-buffers-fuzzy-matching t)
            (helm-mode 1)))

(use-package helm-descbinds)

; TODO helm-swoop if it looks coole

(use-package helm-ag)
#+END_SRC
** Projectile
   Rob Rosado would remind you to manage your shit.
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-global-mode)
    (setq projectile-mode-line
          '(:eval (format " [%s]" (projectile-project-name))))
    (setq projectile-remember-window-configs t)
    (setq projectile-completion-system 'ivy))

  (use-package helm-projectile)
  (require 'helm-projectile)
  (helm-projectile-on)
#+END_SRC
** Dired
   It's better than ls+vim<TAB><TAB>, but still needs tweaking.
   Hide file details by default.
#+BEGIN_SRC emacs-lisp
  (add-hook 'dired-mode-hook
    (lambda ()
      (dired-hide-details-mode)))
#+END_SRC
** Ag
   The silver surfer will probably be replaced by faster search someday.
   Heavy is the head that wears the crown.
#+BEGIN_SRC emacs-lisp
  (use-package ag
    :config
    (add-hook 'ag-mode-hook 'toggle-truncate-lines)
    (setq ag-highlight-search t)
    (setq ag-reuse-buffers 't))
#+END_SRC
** Language Specific Stuff
*** "The Web"
    htmlcssjs will never truly escape each other.
#+BEGIN_SRC emacs-lisp
  (use-package web-mode)
  (use-package mmm-mode)
  (require 'web-mode)
  (require 'mmm-mode)
#+END_SRC
*** JS
    Make JS ECMA and more Reactionary, to boot.
#+BEGIN_SRC emacs-lisp
  (use-package rjsx-mode)
  (use-package js2-mode
    :config
    (setq js2-basic-offset 2))
  (require 'rjsx-mode)
  (require 'js2-mode)
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
#+END_SRC
**** Prettier
     The prettierest one could use some scss help, but is otherwise
     cool, I guess.
#+BEGIN_SRC emacs-lisp
  (use-package prettier-js)
  (require 'prettier-js)
  (add-hook 'js-mode-hook 'prettier-js-mode)
  (add-hook 'js2-mode-hook 'prettier-js-mode)
  (add-hook 'web-mode-hook 'prettier-js-mode)
#+END_SRC
***** TODO Add to scss?
*** Python
    Anaconda maybe?
#+BEGIN_SRC emacs-lisp
  (use-package anaconda-mode)
  (add-hook 'python-mode-hook 'anaconda-mode)
  (add-hook 'python-mode-hook 'anaconda-eldoc-mode)
  (use-package nose)
  (use-package elpy)
  (elpy-enable)
#+END_SRC
** Completion and Checking
   Flycheck seemed good, let's also try company
*** TODO Figure out if both work together or what
*** Company
    It COMPletes ANY, uhh, any what?
#+BEGIN_SRC emacs-lisp
  (use-package company-go)

  (use-package company-jedi)

  (use-package company
    :diminish company-mode
    :init
    (add-hook 'after-init-hook 'global-company-mode)
    :bind
    ("M-/" . company-complete-common)
    :config
    (defun my/python-mode-hook ()
      (add-to-list 'company-backends 'company-jedi))
    (add-hook 'python-mode-hook 'my/python-mode-hook)
    (add-to-list 'company-backends 'company-go)
    (setq company-dabbrev-downcase nil))
  (require 'company)
#+END_SRC
*** Flycheck
    It, uhh, checks things on the fly? 
    (This name would have been really cool in the 90s)
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :config
    (setq flycheck-check-syntax-automatically '(mode-enabled save))
    (setq flycheck-python-flake8-executable "flake8")
    (setq flycheck-disabled-checkers
      (append flycheck-disabled-checkers
        '(javascript-jshint)))
    (setq flycheck-disabled-checkers
      (append flycheck-disabled-checkers
        '(json-jsonlist)))
    (add-hook 'python-mode-hook 'flycheck-mode)
    (add-hook 'go-mode-hook 'flycheck-mode)
    (add-hook 'sh-mode-hook 'flycheck-mode)
    (add-hook 'rst-mode-hook 'flycheck-mode)
    (add-hook 'js2-mode-hook 'flycheck-mode)
    (add-hook 'web-mode-hook 'flycheck-mode)
    (add-hook 'mmm-mode-hook 'flycheck-mode)
    (add-hook 'js-mode-hook 'flycheck-mode))
  (require 'flycheck)
  ;; use local eslint from node_modules before global
  ;; http://emacs.stackexchange.com/questions/21205/flycheck-with-file-relative-eslint-executable
  (defun my/use-eslint-from-node-modules ()
    (let* ((root (locate-dominating-file
                  (or (buffer-file-name) default-directory)
                  "node_modules"))
           (eslint (and root
                        (expand-file-name "node_modules/eslint/bin/eslint.js"
                                          root))))
      (when (and eslint (file-executable-p eslint))
        (setq-local flycheck-javascript-eslint-executable eslint))))
  (add-hook 'flycheck-mode-hook #'my/use-eslint-from-node-modules)

  (setq-default flycheck-disabled-checkers
  (append flycheck-disabled-checkers
    '(javascript-jshint)))
  (flycheck-add-mode 'javascript-eslint 'web-mode)
  (flycheck-add-mode 'javascript-eslint 'js-mode)
  (flycheck-add-mode 'javascript-eslint 'jsx-mode)
#+END_SRC
**** TODO Finish adding stuff from http://codewinds.com/blog/2015-04-02-emacs-flycheck-eslint-jsx.html
** Org
   Installed by =.emacs=, hence the cool org-ified init file.
*** Make Org Evil
    Obviously.
#+BEGIN_SRC emacs-lisp
  (use-package evil-org
    :after org
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
              (lambda ()
                (evil-org-set-key-theme))))
  (add-hook 'org-mode-hook #'(lambda () (electric-indent-local-mode 0)))
  (add-hook 'org-mode-hook #'(lambda () (setq evil-auto-indent nil)))
#+END_SRC
*** Babel
    This should at least sorta make init.org fun to edit
**** TODO Fix this and make it work how you want it to
#+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate #'(lambda (lang body)
    (not (or (string= lang "emacs-lisp")
             (string= lang "python")))))

  (org-babel-do-load-languages 
    'org-babel-load-languages
    '((emacs-lisp . t)
      (python . t)
      (ditaa . t)))
#+END_SRC
**** ☛ TODO Make paredit work in babel'd files
*** Better Bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :init (setq org-bullets-bullet-list '("*" "◉" "◎" "○" "◇")) ; "►"? 
    :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  (require 'org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC
**** Room for improvement
     https://zhangda.wordpress.com/2016/02/15/configurations-for-beautifying-emacs-org-mode/
     Might be a good resource for fixing UTF-8 stuff **AND** making org nicer looking
*** Sequencing 
**** TODO Fix or delete this
#+BEGIN_SRC emacs-lisp
  ;(setq org-todo-keywords '((sequence "☛ TODO(t)" "|" "✔ DONE(d)")
  ;(sequence "⚑ WAITING(w)" "|")
  ;(sequence "|" "✘ CANCELED(c)")))
#+END_SRC
*** Capture Templates
    Mostly work stuff right now. Change that.
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
    '(("T" "Work TODO" entry (file+datetree "~/org/rover.org")
           "**** TODO %?\n")
      ("P" "Work Implementation Plan" entry (file+olp "~/org/rover.org" "Implementation Plans")
           "** %?\n*** Purpose\n\n*** Goals\n\n*** Overview\n\n*** Development Plan\n\n*** Testing and Deployment Plan\n\n*** Documentation Plan\n")
      ("I" "Work Interview" entry (file+datetree "~/org/rover.org")
           "**** TODO Interview %?\n***** Intros\n***** Code/Data Model\n***** Questions\n")
      ;("O" "Work One-pager" entry (file+olp "~/org/rover.org" "One-Pagers")
          ; "** %?\n*** What?\n*** Why?\n*** How?\n*** Open Questions")
     ))
#+END_SRC
*** Agenda
    Maybe just maybe add to the adgenda?
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files '("~/org/" "~/dotfiles/init.org"))
#+END_SRC
** Multi-term
   Yay for shell, make it of the z variety
#+BEGIN_SRC emacs-lisp
  (use-package multi-term)
  (setq multi-term-program "/bin/zsh")
#+END_SRC
** Magit
    Is awesome, use it.
#+BEGIN_SRC emacs-lisp
  (use-package magit)
  (use-package evil-magit)
  (require 'evil-magit)
#+END_SRC
**** TODO Add git timemachine 
** Perspective
#+BEGIN_SRC emacs-lisp
  (use-package perspective)
  (require 'perspective)
  (persp-mode)
#+END_SRC
*** TODO Maybe install perspective-projectile?
    Esp if it plays nice with helm.
    https://github.com/bbatsov/persp-projectile
** Paredit and lisp thisgs
   This needs some love.
#+BEGIN_SRC emacs-lisp
  (use-package paredit)
  (require 'paredit)
  ; The below could use auditing and maybe expanding to make this file work with paredit too
  (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
  (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
  (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
  (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
#+END_SRC
*** TODO Love the above
** Themes
   It doesn't matter cuz it's black and white.
   Well, grey.
   Or, gray?
#+BEGIN_SRC emacs-lisp
  (use-package github-modern-theme)
  (load-theme 'github-modern t)
#+END_SRC
** Smart Mode Line
   It could look nicer.
#+BEGIN_SRC emacs-lisp
  (use-package smart-mode-line)
  (require 'smart-mode-line)
  (setq sml/no-confirm-load-theme t)
  (setq sml/theme 'light)
  (sml/setup)
#+END_SRC
*** TODO Make it look nicer
** Font
   A hard choice.
#+BEGIN_SRC emacs-lisp
  (if (find-font (font-spec :name "IBM Plex Mono"))
      (set-face-attribute 'default nil
        :family "IBM Plex Mono"
        :height 160
        :weight 'normal
        :width 'normal)
      (set-face-attribute 'default nil
        :family "Source Code Pro"
        :height 160
        :weight 'normal
        :width 'normal))
#+END_SRC
* Keybindings
** Leaders
   Precipitate Followers, Global and Local.
#+BEGIN_SRC emacs-lisp
  (general-create-definer global-leader :keymaps 'normal :prefix "SPC")
  (global-leader
    "" '(nil :which-key "global leader")
    "SPC" '(execute-extended-command :which-key "execute"))

  (general-create-definer local-leader :keymaps 'normal :prefix ",")
  (local-leader "" '(nil :wk "local leader"))
#+END_SRC
** Perspective
   It's all how you look at it.
#+BEGIN_SRC emacs-lisp
  (global-leader "l" '(:keymap perspective-map :wk "perspective"))
  (general-define-key
    :keymaps 'perspective-map
    :wk-full-keys nil
    "l" '(persp-switch-quick :wk "quick switch"))
#+END_SRC
** Buffers
   Everything's a buffer, man.
#+BEGIN_SRC emacs-lisp
  (defvar buffer-global-map (make-sparse-keymap) "buffer shortcuts")
  (general-define-key
    :keymaps 'buffer-global-map
    :wk-full-keys nil
    "b" '(buffer-menu :wk "buffers")
    "s" '(switch-to-buffer :wk "switch")
    "k" '(kill-buffer :wk "kill buffer")
    "n" '(next-buffer :wk "next")
    "p" '(previous-buffer :wk "prev"))
  (global-leader "b" '(:keymap buffer-global-map :wk "buffers"))
#+END_SRC
** Files
   Buffers that think they know where they are.
#+BEGIN_SRC emacs-lisp
  (defvar file-global-map (make-sparse-keymap) "file shortcuts")
  (general-define-key
    :keymaps 'file-global-map
    :wk-full-keys nil
    "f" '(find-file :wk "find file")
    "F" '(helm-projectile-find-file-dwim :wk "find file dwim"))
  (global-leader "f" '(:keymap file-global-map :wk "files"))
#+END_SRC
** Directories
   Here and There.
#+BEGIN_SRC emacs-lisp
  (defvar dirs-global-map (make-sparse-keymap) "dirs shortcuts")
  (general-define-key
    :keymaps 'dirs-global-map
    :wk-full-keys nil
    "d" '(dired-jump :wk "dired"))
  (global-leader "d" '(:keymap dirs-global-map :wk "dirs"))
#+END_SRC
** Project
   Everything you need to know about one (big) thing.
#+BEGIN_SRC emacs-lisp
  (defvar project-global-map (make-sparse-keymap) "project shortcuts")
  (general-define-key
    :keymaps 'project-global-map
    :wk-full-keys nil
    "d" '(helm-projectile-find-dir :wk "find dir")
    "f" '(projectile-find-file :wk "find file")
    "s" '(helm-projectile-ag :wk "search")
    "w" '(helm-projectile-switch-project :wk "switch project"))
  (global-leader "p" '(:keymap project-global-map :wk "project"))
#+END_SRC
** Procs
   Processes are, like, buffers in action. Or, maybe they're files
   come to life and maybe life is just a stream of ones, zeros, and the
   occasional null to keep it interesting and piss off the static typers?

   Or maybe, who cares? You rarely access this keymap/function-group and
   it's probably just a holdover from earlier days.
#+BEGIN_SRC emacs-lisp
  (defvar process-global-map (make-sparse-keymap) "process shortcuts")
  (general-define-key
    :keymaps 'process-global-map
    :wk-full-keys nil
    "p" '(proced :wk "processes"))
  (global-leader "P" '(:keymap process-global-map :wk "process"))
#+END_SRC
** Git
   Magit and friends!
#+BEGIN_SRC emacs-lisp
  (defvar git-global-map (make-sparse-keymap) "Git Shortcuts")
  (general-define-key
    :keymaps 'git-global-map
    :wk-full-keys nil
    "b" '(magit-blame :wk "blame")
    "s" '(magit :wk "magit"))
  (global-leader "g" '(:keymap git-global-map :which-key "git"))

  (local-leader
    :package 'magit
    :definer 'minor-mode
    ;:minor-modes 'global-git-commit
    :states 'normal
    :keymaps 'with-editor-mode
    "," '(with-editor-finish :wk "commit")
    "c" '(with-editor-finish :wk "commit")
    "k" '(with-editor-cancel :wk "cancel"))
#+END_SRC
** Org
   This is where i'm putting all my org bindings. TBD on how many I customize,
   maybe i should just get used to C-c? [fn:1]
*** Global org commands
    Like capture and agenda anywhere
#+BEGIN_SRC emacs-lisp
  (defvar org-global-map (make-sparse-keymap) "org global shortcuts")
  (general-define-key
    :keymaps 'org-global-map
    :wk-full-keys nil
    "c" '(org-capture :wk "capture")
    "l" '(org-store-link :wk "store link")
    "a" '(org-agenda :wk "agenda")
    "b" '(org-iswitchb :wk "switch buffers"))
  (global-leader "o" '(:keymap org-global-map :which-key "org"))
#+END_SRC
*** Local org commands
    Shortcuts from inside the belly of the beast.
#+BEGIN_SRC emacs-lisp
  (defvar org-local-map (make-sparse-keymap) "org local shortcuts")
  (general-define-key
    :keymaps 'org-local-map
    :package 'org
    :wk-full-keys nil
    "," '(org-ctrl-c-ctrl-c :wk "C-c C-c")
    "/" '(org-sparse-tree :wk "sparse tree")
    "f" '(helm-org-in-buffer-headings :wk "find heading") ; gonna do an
    "g" '(org-mark-ring-goto :wk "goto back") ; experiment here
    "p" '(org-set-property :wk "set property")
    "r" '(org-priority :wk "set priority")
    "s" '(org-schedule :wk "Schedule")
    "t" '(org-set-tags-command :wk "set tags")
    "d" '(org-deadline :wk "Deadline")
    ">" '(outline-demote :wk "Outline Demote")
    "<" '(outline-promote :wk "Outline Promote")
    "e" '(org-export-dispatch :wk "Export"))
  (local-leader
    :package 'org
    :major-modes '(org-mode t)
    :keymaps 'normal
    "" '(:keymap org-local-map :wk "org local"))
#+END_SRC
*** Org capture shortcuts
    Make org-capture painless.
#+BEGIN_SRC emacs-lisp
  (general-define-key
    :package 'org
    :major-modes 'org-mode
    :keymaps 'normal
    "TAB" 'org-cycle
    "t" 'org-todo)

  (local-leader
    :package 'org
    :definer 'minor-mode
    :states 'normal
    :keymaps 'org-capture-mode
    "," '(org-capture-finalize :wk "finish")
    "c" '(org-capture-finalize :wk "finish")
    "w" '(org-capture-refile :wk "refile")
    "k" '(org-capture-kill :wk "kill"))
#+END_SRC
** Text
   Just wrap the paragraphs for now, make it much better as needed.
#+BEGIN_SRC emacs-lisp
  (defvar text-global-map (make-sparse-keymap) "Text Shortcuts")
  (general-define-key
    :keymaps 'text-global-map
    :wk-full-keys nil
    "p" 'fill-paragraph)
  (global-leader "x" '(:keymap text-global-map :wk "text"))
#+END_SRC
** Term
   I couldn't get local leader to work for ~p~ and ~n~, so I made it
   all global for now.
#+BEGIN_SRC emacs-lisp
  (defvar term-local-map (make-sparse-keymap) "term local shortcuts")
  (general-define-key
    :keymaps 'term-local-map
    :package 'multi-term
    :wk-full-keys nil
    "n" '(multi-term-next :wk "next")
    "p" '(multi-term-prev :wk "prev")
    "c" '(multi-term :wk "create"))
  (global-leader "t" '(:keymap term-local-map :wk "term"))
#+END_SRC
*** TODO Make multi-term-next/prev work locally (and create)
** Help
   I need somebody.
#+BEGIN_SRC emacs-lisp
  (defvar help-global-map (make-sparse-keymap) "help shortcuts")
  (general-define-key
    :keymaps 'help-global-map
    :wk-full-keys nil
    "h" '(help-command :wk "help"))
  (global-leader "h" '(:keymap help-global-map :wk "halp"))
#+END_SRC
** Lispy Things
   Shh...
#+BEGIN_SRC emacs-lisp
  (defvar lisp-global-map (make-sparse-keymap) "lisp")
  (general-define-key
    :keymaps 'lisp-global-map
    :wk-full-keys nil
    "b" '(eval-buffer :wk "eval buffer")
    "e" '(eval-expression :wk "eval expression")
    "f" '(eval-defun :wk "eval defun")
    "l" 'eval-last-sexp
    "r" '(eval-region :wk "eval region")
    "s" '(ielm :wk "shell"))
  (global-leader "k" '(:keymap lisp-global-map :wk "lispy things"))
#+END_SRC
*** TODO Probably move these somewhere else someday
* Old, but interesting inner workings
** +Slack maybe?+
#+BEGIN_SRC emacs-lisp
;(el-get-bundle slack)
;(use-package oauth2)
;(use-package websocket)
;(use-package request)
;(use-package circe)
;(use-package emojify)
;(use-package slack
;  :commands (slack-start)
;  :init
;  (setq slack-buffer-emojify t) ;; if you want to enable emoji, default nil
;  (setq slack-prefer-current-team t)
;  :config
;  (slack-register-team
;    :name ""
;    :default t
;    :client-id ""
;    :client-secret ""
;    :subscribed-channels '(yak-shaving)
;  )

  ;; (evil-define-key 'normal slack-info-mode-map
    ;; ",u" 'slack-room-update-messages)
  ;; (evil-define-key 'normal slack-mode-map
    ;; ",c" 'slack-buffer-kill
    ;; ",ra" 'slack-message-add-reaction
    ;; ",rr" 'slack-message-remove-reaction
    ;; ",rs" 'slack-message-show-reaction-users
    ;; ",pl" 'slack-room-pins-list
    ;; ",pa" 'slack-message-pins-add
    ;; ",pr" 'slack-message-pins-remove
    ;; ",mm" 'slack-message-write-another-buffer
    ;; ",me" 'slack-message-edit
    ;; ",md" 'slack-message-delete
    ;; ",u" 'slack-room-update-messages
    ;; ",2" 'slack-message-embed-mention
    ;; ",3" 'slack-message-embed-channel
    ;; "\C-n" 'slack-buffer-goto-next-message
    ;; "\C-p" 'slack-buffer-goto-prev-message)
   ;; (evil-define-key 'normal slack-edit-message-mode-map
    ;; ",k" 'slack-message-cancel-edit
    ;; ",s" 'slack-message-send-from-buffer
    ;; ",2" 'slack-message-embed-mention
    ;; ",3" 'slack-message-embed-channel)
;  )

;(use-package alert
;  :commands (alert)
;  :init
;  (setq alert-default-style 'notifier))
#+END_SRC

* Footnotes
[fn:1] I should. Or maybe not.

